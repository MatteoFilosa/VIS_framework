A)PathsSimulator.py

The script automatically explores the Falcon 7 million flights visualization (whose url is contained in "conf.json") given the logged traces found in the "explorations" folder. It returns as output three files: a "summary_falcon_7M.json" file in the count folder, another "summary_falcon_7M.json" file in the times_and_violations folder (different from the previous one, containing all the times each interaction required to be reproduced), an additional "summaryProblems_falcon_7M.json" file that contains the violations found in the given trace (the violations are also collected by the times.py script).

All the first two types of files were already computed in the "count" and "time_and_violations" folder.
However, in the case there is the need to recompute them, it is necessary to:

1) Install the requirements (needed also for the count.py and times.py scripts, present in requirements.txt);
2) Download Chrome Webdriver available at: https://chromedriver.chromium.org/home ;
3) Add the downloaded webdriver to PATH;
4) Execute the PathsSimulator.py script.

B)Count, times and violations

In the count folder:

The count.py script opens a single exploration file and returns as output a file named "count_falcon_7M_1.json" (where 1 is the number of the exploration) that contains the count of all the interactions recorded, divided by task. Also, the script updates the .xlsx files, that are divided by task (the task number 1 is the tutorial that the users needed to complete before proceeding with the other tasks). The other "summary_falcon_7M.json" files are the explorations that the count.py script actually uses as input.

In the times_and_violations folder:

The times.py script opens a single exploration file and returns as output a file named
"violationsFound_7M_1.json" (where 1 is the number of the exploration) that contains all the violations in the latency thresholds that were found, divided by task. The script updates the .xlsx files with the times needed to complete each interaction. The other "summary_falcon_7M.json" files are the explorations that the count.py script actually uses as input (that are different from the ones used by the count.py script).
It is possible that some violation output file contains the same violation, but repeated many times; in this case, these violations have been counted as a single violation.

c)Statechart

The statecharts, generated by another software component (the PathsGenerator.py script), are stored in two files, "statechart.json" and "statechart_graphviz.gv".
The "statechart_graphviz.gv" file has been processed in https://dreampuf.github.io/GraphvizOnline/ and has been transformed in a .svg file, in order to manipulate the edges and nodes to make them more visible. The two state charts in the paper have been coloured considering the number of times a specific interaction has been recorded (first state chart) and considering the violations in latency thresholds recorded (second state chart). 



